{"version":3,"file":"static/js/19.9fafa370.chunk.js","mappings":"gQAOMA,EAAaC,EAAAA,GAAAA,GAAH,mKAQVC,EAAaD,EAAAA,GAAAA,GAAH,sJAQVE,EAAMF,EAAAA,GAAAA,IAAH,gFA2CT,EArCa,WACX,OAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,mBAAuBH,EAASD,EACjC,GAAE,CAACC,KAGF,+BACE,SAACP,EAAD,UACGK,EAAKM,OAAS,GACb,4DAEAN,EAAKO,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,aAApB,OACP,UAACb,EAAD,WACoB,OAAjBa,GACC,SAACZ,EAAD,CACEa,IAAK,mCACLC,IAAG,sBAGL,SAACd,EAAD,CACEa,IAAG,yCAAoCD,GACvCE,IAAG,UAAKH,MAGZ,mCAAWA,MACX,uCAAeD,OCtCT,eAACK,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CDyBSG,GADV,OAqBlB,C,2EE9DKC,EAAU,mCACVC,EAAW,gCAEXC,EAAa,mCAAG,WAAMC,GAAN,gGAEKC,IAAAA,IAAA,UAClBH,EADkB,sCACoBD,IAHzB,cAEZK,EAFY,yBAMXF,EAAkBE,EAASC,KAAKC,UANrB,gCAQlBC,QAAQC,MAAR,MARkB,yDAAH,sDAYbC,EAAc,mCAAG,WAAO/B,EAASgC,GAAhB,gGAEIP,IAAAA,IAAA,UAClBH,EADkB,iBACDtB,EADC,oBACkBqB,EADlB,oBAFJ,cAEbK,EAFa,yBAMZM,EAASN,EAASC,OANN,gCAQnBE,QAAQC,MAAR,MARmB,yDAAH,wDAYdG,EAAkB,mCAAG,WAAOjC,EAASD,GAAhB,gGAEA0B,IAAAA,IAAA,UAClBH,EADkB,iBACDtB,EADC,4BAC0BqB,EAD1B,oBAFA,cAEjBK,EAFiB,yBAMhB3B,EAAQ2B,EAASC,KAAK7B,OANN,gCAQvB+B,QAAQC,MAAR,MARuB,yDAAH,wDAYlBI,EAAqB,mCAAG,WAAOlC,EAASmC,GAAhB,gGAEHV,IAAAA,IAAA,UAClBH,EADkB,iBACDtB,EADC,4BAC0BqB,EAD1B,oBAFG,cAEpBK,EAFoB,yBAMnBS,EAAWT,EAASC,KAAKC,UANN,gCAQ1BC,QAAQC,MAAR,MAR0B,yDAAH,wDAYrBM,EAAiB,mCAAG,WAAOC,EAAOC,GAAd,gGAECb,IAAAA,IAAA,UAClBH,EADkB,gCACcD,EADd,kBAC+BgB,EAD/B,gCAFD,cAEhBX,EAFgB,yBAKfY,EAAiBZ,EAASC,KAAKC,UALhB,gCAOtBC,QAAQC,MAAR,MAPsB,yDAAH,wDAWjB3B,EAAM,CACVoB,cAAAA,EACAQ,eAAAA,EACAE,mBAAAA,EACAC,sBAAAA,EACAE,kBAAAA,GAGF,K","sources":["components/Cast.jsx","../node_modules/nanoid/index.browser.js","services/movieApi.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from 'services/movieApi';\nimport styled from 'styled-components';\nimport { nanoid } from 'nanoid';\n\n\nconst StyledList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n  gap: 10px;\n  padding: 0px;\n  list-style-type: none;\n`;\n\nconst StyledItem = styled.li`\n  border: 1px solid black;\n  border-radius: 12px;\n  text-align: center;\n  background-color: #878f99;\n  overflow: hidden;\n`;\n\nconst Img = styled.img`\n  display: block;\n  max-width: 300px;\n  width: 100%;\n`;\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    api.fetchMovieCastById(movieId, setCast);\n  }, [movieId]);\n\n  return (\n    <>\n      <StyledList>\n        {cast.length < 1 ? (\n          <p>Sorry, the cast is not available</p>\n        ) : (\n          cast.map(({ character, name, profile_path }) => (\n            <StyledItem key={nanoid()}>\n              {profile_path === null ? (\n                <Img\n                  src={'https://placehold.jp/200x300.png'}\n                  alt={`just placeholder`}\n                />\n              ) : (\n                <Img\n                  src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                  alt={`${name}`}\n                />\n              )}\n              <h4>Name: {name}</h4>\n              <p>Character: {character}</p>\n            </StyledItem>\n          ))\n        )}\n      </StyledList>\n    </>\n  );\n};\n\nexport default Cast;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import axios from 'axios';\n\nconst API_KEY = 'deb4d54946abdc202a0e5e0e78d6bfcf';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst fetchTrending = async setTrendingMovies => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n    );\n\n    return setTrendingMovies(response.data.results);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst fetchMovieById = async (movieId, setMovie) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setMovie(response.data);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst fetchMovieCastById = async (movieId, setCast) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setCast(response.data.cast);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst fetchMovieReviewsById = async (movieId, setReviews) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setReviews(response.data.results);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst fetchMovieByQuery = async (query, setSearchedMovie) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`\n    );\n    return setSearchedMovie(response.data.results);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst api = {\n  fetchTrending,\n  fetchMovieById,\n  fetchMovieCastById,\n  fetchMovieReviewsById,\n  fetchMovieByQuery,\n};\n\nexport default api;\n"],"names":["StyledList","styled","StyledItem","Img","useState","cast","setCast","movieId","useParams","useEffect","api","length","map","character","name","profile_path","src","alt","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","nanoid","API_KEY","BASE_URL","fetchTrending","setTrendingMovies","axios","response","data","results","console","error","fetchMovieById","setMovie","fetchMovieCastById","fetchMovieReviewsById","setReviews","fetchMovieByQuery","query","setSearchedMovie"],"sourceRoot":""}