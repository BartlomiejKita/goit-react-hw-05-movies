{"version":3,"file":"static/js/18.477aaaaf.chunk.js","mappings":"gPA+CA,EA1CqB,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACdC,EAA2DD,EAA3DC,GAAIC,EAAuDF,EAAvDE,MAAOC,EAAgDH,EAAhDG,SAAUC,EAAsCJ,EAAtCI,aAAcC,EAAwBL,EAAxBK,OAAQC,EAAgBN,EAAhBM,YACnD,OACE,iCACE,gCACmBC,IAAhBD,GACC,gBACEE,IAAG,yCAAoCF,GACvCG,IAAG,UAAKP,EAAL,oBAGL,gBAAKM,IAAK,+BAAgCC,IAAG,sBAE/C,4BACE,wBAAKP,KACL,yCAAgC,GAAfE,GAAmBM,QAAQ,GAA5C,QACA,sCACA,uBAAIP,KACJ,oCACA,8BAAIE,QAAJ,IAAIA,OAAJ,EAAIA,EAAQM,KAAI,qBAAGC,KAAkB,IAArB,aAGpB,4BACE,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaZ,EAAb,SAAR,qBAEF,yBACE,SAAC,KAAD,CAAMY,GAAE,kBAAaZ,EAAb,YAAR,2BAGJ,SAAC,KAAD,SAIP,E,UCTD,EAzB0B,WACxB,IAAIa,GAAWC,EAAAA,EAAAA,MAEf,GAA0BC,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOhB,EAAP,KAAciB,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,eAAmBH,EAASD,EAC7B,GAAE,CAACC,KAGF,iCACE,oBACEI,QAAS,WACPR,GAAU,EACX,EAHH,WAKC,SAAC,MAAD,IALD,eAOA,SAAC,EAAD,CAAcd,MAAOA,KACrB,SAAC,KAAD,MAGL,C,2EC5BKuB,EAAU,mCACVC,EAAW,gCAEXC,EAAa,mCAAG,WAAMC,GAAN,gGAEKC,IAAAA,IAAA,UAClBH,EADkB,sCACoBD,IAHzB,cAEZK,EAFY,yBAMXF,EAAkBE,EAASC,KAAKC,UANrB,gCAQlBC,QAAQC,MAAR,MARkB,yDAAH,sDAYbC,EAAc,mCAAG,WAAOf,EAASD,GAAhB,gGAEIU,IAAAA,IAAA,UAClBH,EADkB,iBACDN,EADC,oBACkBK,EADlB,oBAFJ,cAEbK,EAFa,yBAMZX,EAASW,EAASC,OANN,gCAQnBE,QAAQC,MAAR,MARmB,yDAAH,wDAYdE,EAAkB,mCAAG,WAAOhB,EAASiB,GAAhB,gGAEAR,IAAAA,IAAA,UAClBH,EADkB,iBACDN,EADC,4BAC0BK,EAD1B,oBAFA,cAEjBK,EAFiB,yBAMhBO,EAAQP,EAASC,KAAKO,OANN,gCAQvBL,QAAQC,MAAR,MARuB,yDAAH,wDAYlBK,EAAqB,mCAAG,WAAOnB,EAASoB,GAAhB,gGAEHX,IAAAA,IAAA,UAClBH,EADkB,iBACDN,EADC,4BAC0BK,EAD1B,oBAFG,cAEpBK,EAFoB,yBAMnBU,EAAWV,EAASC,KAAKC,UANN,gCAQ1BC,QAAQC,MAAR,MAR0B,yDAAH,wDAYrBO,EAAiB,mCAAG,WAAOC,EAAOC,GAAd,gGAECd,IAAAA,IAAA,UAClBH,EADkB,gCACcD,EADd,kBAC+BiB,EAD/B,gCAFD,cAEhBZ,EAFgB,yBAKfa,EAAiBb,EAASC,KAAKC,UALhB,gCAOtBC,QAAQC,MAAR,MAPsB,yDAAH,wDAWjBX,EAAM,CACVI,cAAAA,EACAQ,eAAAA,EACAC,mBAAAA,EACAG,sBAAAA,EACAE,kBAAAA,GAGF,K","sources":["components/MovieDetails.jsx","components/MovieDetailsPage.jsx","services/movieApi.js"],"sourcesContent":["import React from 'react';\nimport { Link, Outlet } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n\nconst MovieDetails = ({ movie }) => {\n  const { id, title, overview, vote_average, genres, poster_path } = movie;\n  return (\n    <>\n      <div>\n        {poster_path !== undefined ? (\n          <img\n            src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n            alt={`${title} movie poster`}\n          />\n        ) : (\n          <img src={'https://placehold.co/500x750'} alt={`just placeholder`} />\n        )}\n        <div>\n          <h1>{title}</h1>\n          <p>User Score: {(vote_average * 10).toFixed(0)}%</p>\n          <h2>Overwiew</h2>\n          <p>{overview}</p>\n          <h2>Genres</h2>\n          <p>{genres?.map(({ name }) => name + ', ')}</p>\n        </div>\n      </div>\n      <div>\n        <h3>Additional information</h3>\n        <ul>\n          <li>\n            <Link to={`/movies/${id}/cast`}>Cast</Link>\n          </li>\n          <li>\n            <Link to={`/movies/${id}/reviews`}>Reviews</Link>\n          </li>\n        </ul>\n        <Outlet />\n      </div>\n    </>\n  );\n};\n\nMovieDetails.propTypes = {\n  movie: PropTypes.object,\n};\n\nexport default MovieDetails;\n","import React, { useEffect, useState } from 'react';\nimport { Outlet, useNavigate, useParams } from 'react-router-dom';\nimport api from 'services/movieApi';\nimport MovieDetails from './MovieDetails';\nimport { IoIosArrowRoundBack } from 'react-icons/io';\n\n\nconst MoviesDetailsPage = () => {\n  let navigate = useNavigate();\n\n  const [movie, setMovie] = useState({});\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    api.fetchMovieById(movieId, setMovie);\n  }, [movieId]);\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          navigate(-1);\n        }}\n      >\n       <IoIosArrowRoundBack/> Go back\n      </button>\n      <MovieDetails movie={movie} />\n      <Outlet />\n    </>\n  );\n};\n\nexport default MoviesDetailsPage;\n","import axios from 'axios';\n\nconst API_KEY = 'deb4d54946abdc202a0e5e0e78d6bfcf';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst fetchTrending = async setTrendingMovies => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n    );\n\n    return setTrendingMovies(response.data.results);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst fetchMovieById = async (movieId, setMovie) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setMovie(response.data);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst fetchMovieCastById = async (movieId, setCast) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setCast(response.data.cast);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst fetchMovieReviewsById = async (movieId, setReviews) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setReviews(response.data.results);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst fetchMovieByQuery = async (query, setSearchedMovie) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`\n    );\n    return setSearchedMovie(response.data.results);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst api = {\n  fetchTrending,\n  fetchMovieById,\n  fetchMovieCastById,\n  fetchMovieReviewsById,\n  fetchMovieByQuery,\n};\n\nexport default api;\n"],"names":["movie","id","title","overview","vote_average","genres","poster_path","undefined","src","alt","toFixed","map","name","to","navigate","useNavigate","useState","setMovie","movieId","useParams","useEffect","api","onClick","API_KEY","BASE_URL","fetchTrending","setTrendingMovies","axios","response","data","results","console","error","fetchMovieById","fetchMovieCastById","setCast","cast","fetchMovieReviewsById","setReviews","fetchMovieByQuery","query","setSearchedMovie"],"sourceRoot":""}